% CONFIG
% ======

% Aliasses
sort LocationId = Int;
sort CarrierId = Int;
sort CardId = Int;

% Carrier ids
map NS, SYNTUS, TLS : CarrierId;
eqn TLS = 0;
eqn NS = 1;
eqn SYNTUS = 2;

map NUMBER_OF_CARDS : Nat;
eqn NUMBER_OF_CARDS = 3;

% Mapping from carrier ids to location ids (-1 when not checked in)
sort CardStatusMapping = CarrierId -> LocationId;

map default_card_mapping, default_card_values : CardStatusMapping;
eqn default_card_mapping = default_card_values[TLS->-1][NS->-1][SYNTUS->-1];

% Mapping from two location ids two the price of that route
map prices : LocationId # LocationId -> Real;

eqn prices(51, 52) = 1;
eqn prices(52, 51) = 1;

eqn prices(52, 53) = 2;
eqn prices(53, 52) = 2;

eqn prices(51, 53) = 3;
eqn prices(53, 51) = 3;

% ACTIONS
% =======

act
  show_card : CardId # CarrierId; 
  read_card : CardId # CarrierId; 
  show : CardId # CarrierId;

  send_card_info: CardId # LocationId # LocationId # Real;
  receive_card_info: CardId # LocationId # LocationId # Real;
  card_info: CardId # LocationId # LocationId # Real;

  send_card_info_tls: CardId # CardStatusMapping # Real;
  receive_card_info_tls: CardId # CardStatusMapping # Real;
  card_info_tls: CardId # CardStatusMapping # Real;

  write: CardId # LocationId # Real;
  update: CardId # LocationId # Real;
  process: CardId # LocationId # Real;

  write_tls: CardId # CardStatusMapping # Real;
  update_tls: CardId # CardStatusMapping # Real;
  process_tls: CardId # CardStatusMapping # Real;

% PROCESSES
% =========

proc
  Card(card_number : Int, credit : Real, card_data : CardStatusMapping) =
    sum carrier_id : CarrierId . (0 <= carrier_id && carrier_id < 3) ->
      show_card(card_number, carrier_id) .      
      (
        % In case of carrier
        (carrier_id != TLS) ->
          send_card_info(card_number, card_data(carrier_id), card_data(TLS), credit) .
          sum new_checked_in : Int, new_credit : Real . update(card_number, new_checked_in, new_credit) .
          Card(card_number, new_credit, card_data[carrier_id -> new_checked_in][TLS -> -1]) +

        % In case of TLS
        (carrier_id == TLS) ->
          send_card_info_tls(card_number, card_data, credit) .
          sum new_data : CardStatusMapping, new_credit : Real . update_tls(card_number, new_data, new_credit) .
          Card(card_number, new_credit, new_data)
      );

  CarrierReader(carrier_id : CarrierId, location : Int) = 
     sum card_number:Int . (101<=card_number&&card_number<101+NUMBER_OF_CARDS) -> read_card(card_number,carrier_id) 
     . sum checked_in:Int,checked_in_tls:Int,credit : Real . (0<=credit&&credit<=10) -> (receive_card_info(card_number,checked_in,checked_in_tls,credit) 
     . ((checked_in != -1)                    -> (write(card_number, -1, credit-prices(location,checked_in)) . CarrierReader(carrier_id, location))        %uitcheckprocedure
     + (checked_in == -1 && checked_in_tls != -1) -> (write(card_number, -1, credit-prices(location,checked_in)) . CarrierReader(carrier_id, location))        %uitcheckprocedure als is overgecheckt
     + (checked_in == -1 && checked_in_tls == -1) -> (write(card_number, location , credit  ) . CarrierReader(carrier_id, location))));     %incheckprocedure         

  OvercheckReader(location : Int) = 
     sum card_number:Int . (101<=card_number&&card_number<101+NUMBER_OF_CARDS) -> read_card(card_number,TLS) 
     . sum data:CardStatusMapping,credit : Real . (0<=credit&&credit<=10) -> (receive_card_info_tls(card_number, data, credit)
     . (((data(NS) != -1)     -> write_tls(card_number, data[NS->-1][TLS->location]    , credit-1) . OvercheckReader(location)) %uitchecken bij ns, inchecken bij tls
     + ((data(SYNTUS) != -1) -> write_tls(card_number, data[SYNTUS->-1][TLS->location], credit-1) . OvercheckReader(location)) %uitchecken bij syntus, inchecken bij tls
     + ((data(TLS) != -1)    -> write_tls(card_number, data[TLS->location]               , credit-1) . OvercheckReader(location))));   %TODO
     %                            ^---   hierboven moet worden vastgesteld met welke vervoerder is gereisd.
%);
      


  System =  Card(101, 5, default_card_mapping)|| Card(102, 5, default_card_mapping) || Card(103, 5, default_card_mapping) 
         || CarrierReader(SYNTUS,51) || CarrierReader(SYNTUS,53) || OvercheckReader(53);


init
   hide  ( {card_info, process, card_info_tls, process_tls},
   allow ( {show, card_info, process, card_info_tls, process_tls},
   comm({   send_card_info | receive_card_info -> card_info, 
            show_card | read_card -> show,
            write | update -> process, 
            write_tls | update_tls -> process_tls,
            send_card_info_tls | receive_card_info_tls -> card_info_tls}, 
   System)));


