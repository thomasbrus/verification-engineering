sort Data = Nat -> Bool;    %Verzameling van check-in-gegevens van vervoerders (CarrierID geeft boolean ingecheckt)

map travellers:Nat;
map NS,SYNTUS,TLS:Nat;
map default0,default: Data; %Lege verzamelingen
eqn default = default0[TLS->false][NS->false][SYNTUS->false];

eqn travellers = 3;         %Aantal gedefinieerde reizigers	
eqn TLS = 0;                %CarrierID van TLS
eqn NS = 1;                 %CarrierID van NS
eqn SYNTUS = 2;             %CarrierID van Syntus



act
 show_card : Int # Int; 
 read_card : Int # Int; 
 show : Int # Int;

 send_card_info: Int # Bool # Bool # Int;
 rec_card_info: Int # Bool # Bool # Int;
 card_info: Int # Bool # Bool # Int;

 send_card_info_tls: Int # Data # Int;
 rec_card_info_tls: Int # Data # Int;
 card_info_tls: Int # Data # Int;

 write: Int # Bool # Int;
 update: Int # Bool # Int;
 process: Int # Bool # Int;

 write_tls: Int # Data # Int;
 update_tls: Int # Data # Int;
 process_tls: Int # Data # Int;

proc
  Card(card_number : Int, credit : Int, data : Data) =  
     sum carrier_id:Nat .(0<=carrier_id && carrier_id<3) -> show_card(card_number,carrier_id)    
     . (   (carrier_id >  TLS) -> send_card_info(card_number, data(carrier_id), data(TLS), credit)                  %procedure bij vervoerders
                              . sum new_checked_in:Bool,new_credit:Int . (0<=credit&&credit<=10) -> update(card_number, new_checked_in, new_credit)     
                              . Card(card_number, new_credit, data[carrier_id->new_checked_in][TLS->false])
         + (carrier_id == TLS) -> send_card_info_tls(card_number, data, credit)                                     %procedure bij overchecken
                              . sum new_data:Data,new_credit:Int . (0<=credit&&credit<=10) -> update_tls(card_number, new_data, new_credit)     
                              . Card(card_number, new_credit, new_data));

  CarrierReader(carrier_id : Nat) = 
     sum card_number:Int . (101<=card_number&&card_number<101+travellers) -> read_card(card_number,carrier_id) 
     . sum checked_in:Bool,checked_in_tls:Bool,credit:Int . (0<=credit&&credit<=10) -> (rec_card_info(card_number,checked_in,checked_in_tls,credit) 
     . ((checked_in)                    -> (write(card_number, false, credit-1) . CarrierReader(carrier_id))        %uitcheckprocedure
     + (!checked_in &&  checked_in_tls) -> (write(card_number, false, credit-1) . CarrierReader(carrier_id))        %uitcheckprocedure als is overgecheckt
     + (!checked_in && !checked_in_tls) -> (write(card_number, true , credit  ) . CarrierReader(carrier_id))));     %incheckprocedure         

  OvercheckReader = 
     sum card_number:Int . (101<=card_number&&card_number<101+travellers) -> read_card(card_number,TLS) 
     . sum data:Data,credit:Int . (0<=credit&&credit<=10) -> (rec_card_info_tls(card_number, data, credit)
     . (((data(NS) == true)     -> write_tls(card_number, data[NS->false][TLS->true]    , credit-1) . OvercheckReader) %uitchecken bij ns, inchecken bij tls
     + ((data(SYNTUS) == true) -> write_tls(card_number, data[SYNTUS->false][TLS->true], credit-1) . OvercheckReader) %uitchecken bij syntus, inchecken bij tls
     + ((data(TLS) == true)    -> write_tls(card_number, data[TLS->true]               , credit-1) . OvercheckReader)));   %TODO
     %                            ^---   hierboven moet worden vastgesteld met welke vervoerder is gereisd.
%);
      


  System =  Card(101, 5, default)|| Card(102, 5, default) %|| Card(103, 5, default) 
         || CarrierReader(SYNTUS) || CarrierReader(NS) || OvercheckReader;


init
   hide  ( {card_info, process, card_info_tls, process_tls},
   allow ( {show, card_info, process, card_info_tls, process_tls},
   comm({   send_card_info | rec_card_info -> card_info, 
            show_card | read_card -> show,
            write | update -> process, 
            write_tls | update_tls -> process_tls,
            send_card_info_tls | rec_card_info_tls -> card_info_tls}, 
   System)));