% FORMAL REQUIREMENTS
% ===================

%::BEWEZEN
% Geen deadlocks
%     [ true* ] < true > true

% Er mag per station hoogstens één keer worden overgecheckt per reis.
%     [ true * . 
%      show(100, 0, 51) . tau*. (exists x:Int . val(0<=x && x<=5) && reader_status(100, CHECKIN_SUCCESSFUL, x)) . 
%      (!(exists x:CarrierId, y:LocationId . val(0<=x && x<=2 && 50<=y && y<=52) && show(100, x, y)))* .
%      show(100, 0, 51) . tau* . (exists x:Int . val(0<=x && x<=5) && reader_status(100, CHECKIN_SUCCESSFUL, x)) 
%     ] false

% Er kan niet overgecheckt worden als er niet is ingecheckt. 
%     [ (!(exists b:Bool, x:Int . val(0<=x && x<=5) && reader_status(100, b, x)))* .
%        show(100, 0, 51) . tau* . (exists x:Int . val(0<=x && x<=10) && reader_status(100, CHECKIN_SUCCESSFUL, x)) 
%     ] false

% Het paaltje toont na het registeren de uitkomst van de actie en het huidige saldo.
%     [ true * . (exists x:CarrierId, y:LocationId . val(0<=x && x<=2 && 50<=y && y<=52) && show(100, x, y)) . 
%       tau* . !(exists x:Int, s:StatusId . val(-5<=x && x<=5 && -1<=s && s<=1) && reader_status(100, b, x)) 
%     ] false

% Als je incheckt en daarna uitcheckt op hetzelfde station, worden geen kosten in rekening gebracht. 
%     forall x:Int. val(0<=x && x<=5) => (
%       [ true* . show(100, 2, 50) . tau*. reader_status(100, SUCCESSFUL_CHECKIN, x) . 
%         !(exists a:CarrierId, b:LocationId . val(0<=a && a<=2 && 50<=b && b<=52) && show(100, a, b))* . show(100, 2, 50)
%       ]
%       < tau* . reader_status(100, SUCCESSFUL_CHECKOUT, x) > true )

% Als er wordt ingecheckt en uitgecheckt bij één vervoerder, moet de correcte prijs worden afgerekend op basis van de prijzentabel.
%     forall x:Int . val(0<=x && x<=5) => (
%       [ true* . show(100, 2, 50) . tau* . reader_status(100, SUCCESSFUL_CHECKIN, x) .
%         !(exists a:CarrierId, b:LocationId . val(0<=a && a<=2 && 50<=b && b<=52) && show(100, a, b))* . show(100, 2, 51) 
%       ]
%       < tau* . reader_status(100, SUCCESSFUL_CHECKOUT, x-prices(50,51)) > true )

% Als er wordt overgecheckt moet het laatstgereisde vervoerderstraject worden afgerekend.
% BROKEN
%     forall x:Int . val(0<=x && x<=5) => (
%       [ true* . show(100, 2, 50) . tau* . reader_status(100, SUCCESSFUL_CHECKIN, x) .
%         !(exists a:CarrierId, b:LocationId . val(0<=a && a<=2 && 50<=b && b<=52) && show(100, a, b))* . show(100, 0, 51) 
%       ]
%       < tau* . reader_status(100, SUCCESSFUL_CHECKIN, x-prices(50,51)) > true )

% Als er wordt uitgecheckt na een overcheck, moet het laatstgereisde vervoerderstraject worden afgerekend.
%     forall x:Int . val(0<=x && x<=5) => (
%       [ true* . show(100, 0, 51) . tau* . reader_status(100, SUCCESSFUL_CHECKIN, x) .
%         !(exists a:CarrierId, b:LocationId . val(0<=a && a<=2 && 50<=b && b<=52) && show(100, a, b))* . show(100, 2, 52) 
%       ]
%       < tau* . reader_status(100, SUCCESSFUL_CHECKIN, x-prices(51,52)) > true )